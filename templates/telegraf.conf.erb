# THIS FILE IS MANAGED BY PUPPET (created by defined type modules::telegraf )

# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared plugins.

# Even if a plugin has no configuration, it must be declared in here
# to be active. Declaring a plugin means just specifying the name
# as a section with no variables. To deactivate a plugin, comment
# out the name and any variables.

# Use 'telegraf -config telegraf.toml -test' to see what metrics a config
# file would generate.

# One rule that plugins conform to is wherever a connection string
# can be passed, the values '' and 'localhost' are treated specially.
# They indicate to the plugin to use their own builtin configuration to
# connect to the local system.

# NOTE: The configuration has a few required parameters. They are marked
# with 'required'. Be sure to edit those to make this configuration work.

# Tags can also be specified via a normal map, but only one form at a time:
# [tags]
#   dc = "us-east-1"
<% if @tags -%>
[global_tags]
<%   @tags.sort.each do |key, value| -%>
   <%= key %> = "<%= value %>"
<%   end -%>
<% end -%>

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all plugins
  interval = "<%= @agent_interval %>"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Default data flushing interval for all outputs
  flush_interval = "<%= @agent_flush_interval %>"
  # Jitter the flush interval by a random range
  # ie, a jitter of 5s and interval 10s means flush will happen every 10-15s
  flush_jitter = "10s"

  # Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  # Run telegraf in debug mode
  debug = false

  # Run telegraf in quiet mode
  quiet = false

  # Override default hostname, if empty use os.Hostname()
  <% if @agent_hostname -%>
  hostname = "<%= @agent_hostname %>"
  <% else -%>
  hostname = ""
  <% end -%>

###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

<% if @outputs_influxdb_enabled -%>
# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP endpoint URL for your InfluxDB instance
  # Multiple urls can be specified for InfluxDB cluster support. Server to
  # write to will be randomly chosen each interval.
  # urls = ["http://localhost:8086"] # required.
  urls = <%= @outputs_influxdb_urls.inspect %>

  # The target database for metrics. This database must already exist
  # database = "telegraf" # required.
  database = "<%= @outputs_influxdb_database %>"

  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  # If not provided, will default to 0 (no timeout)
  # timeout = "5s"
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"
  username = "<%= @outputs_influxdb_username %>"
  password = "<%= @outputs_influxdb_password %>"

  # Set the user agent for the POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"
  user_agent = "telegraf <%= @version %>"
<% end -%>


###############################################################################
#                                  PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  # Whether to report per-cpu stats or not
  percpu = <%= scope['::telegraf::cpu_percpu']%>
  # Whether to report total system cpu stats or not
  totalcpu = <%= scope['::telegraf::cpu_totalcpu']%>
  # Comment this line if you want the raw CPU time metrics
  fielddrop = <%= scope['::telegraf::cpu_drop']%>

# Read metrics about disk usage by mount point
[[inputs.disk]]
  # no active configuration changes
  #
  # By default, telegraf gather stats for all mountpoints.
  # Setting mountpoints will restrict the stats to the specified mountpoints.
<% if scope['::telegraf::disk_mountpoints'].any? %>
  Mountpoints = <%= scope['::telegraf::disk_mountpoints'].inspect %>
<% end %>
  # Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  # present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  # no active configuration changes
  #
  # By default, telegraf will gather stats for all devices including
  # disk partitions.
  # Setting devices will restrict the stats to the specified devcies.
  # Devices=["sda","sdb"]
  # Uncomment the following line if you do not need disk serial numbers.
  # SkipSerialNumber = true

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about network usage
[[inputs.net]]
  # By default, telegraf gathers stats from any up interface (excluding loopback)
  # Setting interfaces will tell it to gather these explicit interfaces,
  # regardless of status.
  #
  # interfaces = ["eth0", ... ]
  #
  # Drop not wanted icmp metrics
  drop = ["net_icmp"]

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  # no configuration

###############################################################################
#                         SERVICE PLUGINS                                     #
###############################################################################

